{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAoEeA,MAlEf,SAAkBC,GAAQ,IAAD,EAEAC,mBAASD,EAAME,KAAKF,EAAME,KAAKC,MAAM,IAFrC,mBAElBC,EAFkB,KAEZC,EAFY,KAInBC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAalB,OACI,sBAAMW,UAAU,YAAYC,SAZf,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAoB,IAAdD,KAAKE,UACpBC,KAAMjB,IAGVC,EAAS,KAIL,SACKL,EAAME,KACP,qCACA,uBACAoB,KAAO,OACPC,YAAY,mBACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,kBACVW,SAAWd,EACXe,IAAKpB,IAEL,wBAAQQ,UAAU,mBAAlB,uBAOI,qCACH,uBACDQ,KAAO,OACPC,YAAY,aACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,aACVW,SAAWd,EACXe,IAAKpB,IAEL,wBAAQQ,UAAU,cAAlB,4B,eCbGa,MArCf,YAA2D,IAA5CC,EAA2C,EAA3CA,MAAMC,EAAqC,EAArCA,aAAaC,EAAwB,EAAxBA,WAAWC,EAAa,EAAbA,WAAa,EAEhC9B,mBAAS,CAC3BgB,GAAG,KACHd,MAAM,KAJ4C,mBAEhDD,EAFgD,KAE3C8B,EAF2C,KActD,OAAG9B,EAAKe,GACG,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SARZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAGd,GACnB6B,EAAQ,CACJf,GAAG,KACHd,MAAM,QAOPyB,EAAMK,KAAI,SAACC,EAAKC,GAAN,OACb,sBAAKrB,UAAWoB,EAAKE,WAAY,oBACrC,WADI,UAGA,qBAAmBC,QAAS,kBAAIR,EAAaK,EAAKjB,KAAlD,SACKiB,EAAKb,MADAa,EAAKjB,IAGf,sBAAKH,UAAU,QAAf,UACI,cAAC,IAAD,CACIuB,QAAS,kBAAIP,EAAWI,EAAKjB,KAC7BH,UAAU,gBAEd,cAAC,IAAD,CAAQuB,QAAS,kBAAIL,EAAQ,CAACf,GAAGiB,EAAKjB,GAAGd,MAAM+B,EAAKb,QAChDP,UAAU,qBAXLqB,OC8BNG,MAnDf,WAAqB,IAAD,EACQrC,mBAAS,IADjB,mBACV2B,EADU,KACJW,EADI,KAuChB,OACI,gCACI,2DACA,cAAC,EAAD,CAAUxB,SAvCF,SAAAmB,GACZ,GAAIA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAAnC,CAIA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OAiCL,cAAC,EAAD,CAAMb,MAAOA,EACbC,aAfa,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKjB,KAAKA,IACTiB,EAAKE,YAAYF,EAAKE,YAEnBF,KAEXK,EAASG,IASLZ,WAvBW,SAAAb,GACf,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAEA,EAAKjB,KAAKA,KACpDsB,EAASI,IAsBLZ,WAhCU,SAACc,EAAOC,GAClBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAI3CkB,GAAS,SAAAQ,GAAI,OAAEA,EAAKd,KAAI,SAAAe,GAAI,OAAGA,EAAK/B,KAAK4B,EAAOC,EAASE,eCblDC,MARf,WACE,OACE,qBAAKnC,UAAU,WAAf,SACE,cAAC,EAAD,OCDNoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fdced5d7.chunk.js","sourcesContent":["import React,{useState, useEffect,useRef} from 'react'\r\n\r\nfunction TodoForm(props) {\r\n\r\nconst [input,setInput] = useState(props.edit?props.edit.value:'');\r\n\r\nconst inputRef = useRef(null)\r\n\r\nuseEffect(()=>{\r\n    inputRef.current.focus()\r\n})\r\n\r\nconst handleChange = e =>{\r\n    setInput(e.target.value);\r\n};\r\nconst handleSubmit = e =>{\r\n    e.preventDefault();\r\n\r\n    props.onSubmit({\r\n        id: Math.floor(Math.random()*10000),\r\n        text: input\r\n\r\n    });\r\n    setInput('');\r\n\r\n};\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n            {props.edit?( \r\n            <>\r\n            <input \r\n            type = \"text\" \r\n            placeholder=\"Update your item\"\r\n            value={input} \r\n            name='text' \r\n            className='todo-input edit'\r\n            onChange ={handleChange}\r\n            ref={inputRef}\r\n            />\r\n            <button className='todo-button edit'>Update</button>\r\n            </>\r\n            ) \r\n            \r\n            : \r\n            (\r\n\r\n                <>\r\n             <input \r\n            type = \"text\" \r\n            placeholder=\"Add a todo\"\r\n            value={input} \r\n            name='text' \r\n            className='todo-input'\r\n            onChange ={handleChange}\r\n            ref={inputRef}\r\n            />\r\n            <button className='todo-button'>Add Todo</button>\r\n            \r\n            </>\r\n            )\r\n            }\r\n            \r\n            \r\n            \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React,{useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport {RiCloseCircleLine} from 'react-icons/ri'\r\nimport {TiEdit} from 'react-icons/ti'\r\n\r\n\r\nfunction Todo({todos,completeTodo,removeTodo,updateTodo}) {\r\n\r\n    const[edit,setEdit] = useState({\r\n        id:null,\r\n        value:''\r\n    })\r\n\r\n    const submitUpdate = value=>{\r\n        updateTodo(edit.id,value)\r\n        setEdit({\r\n            id:null,\r\n            value:''\r\n        })\r\n    }\r\n    if(edit.id){\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n    }\r\n\r\n    return todos.map((todo,index)=>(\r\n        <div className={todo.isComplete ?'todo-row complete':\r\n    'todo-row'} key={index}\r\n    >\r\n        <div key={todo.id} onClick={()=>completeTodo(todo.id)}>\r\n            {todo.text}\r\n        </div>\r\n        <div className='icons'>\r\n            <RiCloseCircleLine\r\n                onClick={()=>removeTodo(todo.id)}\r\n                className='delete-icon'\r\n                />\r\n            <TiEdit onClick={()=>setEdit({id:todo.id,value:todo.text})}\r\n                className='delete-icon'/>\r\n        </div>\r\n    </div>\r\n    ))\r\n}\r\n\r\nexport default Todo;","import React,{useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\n\r\nfunction TodoList() {\r\n    const[todos,setTodos] = useState([])\r\n    \r\n    const addTodo = todo =>{\r\n        if(!todo.text || /^\\s*$/.test(todo.text)){\r\n            return\r\n        }\r\n\r\n        const newTodos = [todo, ...todos]\r\n\r\n        setTodos(newTodos)\r\n\r\n    };\r\n\r\n    const updateTodo =(todoId,newValue) =>{\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\r\n            return\r\n        }\r\n\r\n        setTodos(prev=>prev.map(item=>(item.id===todoId?newValue:item)))\r\n    }\r\n\r\n    const removeTodo = id =>{\r\n        const removeArr = [...todos].filter(todo=>todo.id!==id)\r\n        setTodos(removeArr);\r\n    }\r\n\r\n    \r\n\r\n    const completeTodo = id=>{\r\n        let updatedTodos = todos.map(todo=>{\r\n            if(todo.id===id){\r\n                todo.isComplete=!todo.isComplete\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>What are you doing Today?</h1>  \r\n            <TodoForm onSubmit={addTodo} />   \r\n            <Todo todos={todos} \r\n            completeTodo={completeTodo} \r\n            removeTodo={removeTodo}\r\n            updateTodo={updateTodo}/>  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}